// lexer.h # Auto-Generated by Overclad //
#pragma once
#include <iostream>
#include <regex>
#include <string>
#include <vector>
#include <unordered_map>
enum class TokenType
{
	UNDEF = 0,
	KEYWORD,
	IDENTIFIER,
	ARROW,
	OPERATOR,
	SYMBOL,
	INTEGER,
	STRING,
	COMMENT,
	WHITESPACE,
	_EOF,
};
struct Token
{
	TokenType Type;
	std::string Lexeme;
	int line, col;
};
void InitLexer(const std::string& text);
std::vector<Token>& LexAll(const std::string& text);
const std::unordered_map<TokenType, std::string> tokenNames = {
	{ TokenType::KEYWORD, "KEYWORD" },
	{ TokenType::IDENTIFIER, "IDENTIFIER" },
	{ TokenType::ARROW, "ARROW" },
	{ TokenType::OPERATOR, "OPERATOR" },
	{ TokenType::SYMBOL, "SYMBOL" },
	{ TokenType::INTEGER, "INTEGER" },
	{ TokenType::STRING, "STRING" },
	{ TokenType::COMMENT, "COMMENT" },
	{ TokenType::WHITESPACE, "WHITESPACE" },
};

